1、使用Quartz创建定时任务发送邮件
(1)在父工程common-parent中导入坐标
	<dependency>
		<groupId>org.quartz-scheduler</groupId>
		<artifactId>quartz</artifactId>
		<version>2.2.1</version>
	</dependency>
	<dependency>
		<groupId>org.quartz-scheduler</groupId>
		<artifactId>quartz-jobs</artifactId>
		<version>2.2.1</version>
	</dependency>
(2)在bos_managment_service工程的com.itheima.bos.jobs包下面创建MailJob类(确保service工程已经继承父工程common-parent)
	public class WorkbillJob {
		@Autowired
		private WorkbillDao workbillDao;

		public void sendEmail() {
			List<WorkBill> list = workbillDao.findAll();
			String receiver = "tony@zom.com";
			String subject = "工单信息";
			String emailBody = "工单ID\t工单类型\t快递员\t <br>";
			for (WorkBill workBill : list) {
				emailBody += workBill.getId() + "\t" + workBill.getType() + "\t"
						+ workBill.getCourier().getName() + "\t <br>";
			}
			MailUtils.sendMail(receiver, subject, emailBody);
		}
	}
(3)在bos_managment_web工程applicationContext.xml文件中增加以下内容
	<!-- 指定自定义任务对象，这个类就是我们自定义的任务类 -->
	<bean id="workbillJob" class="com.itheima.bos.jobs.WorkbillJob"></bean>
	
	<!-- 指定jobdetail(任务),负责通过反射生成具体的任务对象，并调用自定义任务类的指定方法，所以需要注入类和指定类中的方法 -->
	<bean id="jobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<!-- 注入要调用的任务对象 -->
		<property name="targetObject" ref="workbillJob" />
		<!-- 指定要调用的方法 -->
		<property name="targetMethod" value="sendEmail" />
	</bean>
	
	<!-- 指定触发器，触发器Trigger就是定时任务的触发时间，它规定安排了关联的任务会在什么时候执行，并且表明了再次执行的时机 -->
	<bean id="trigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<!-- 注入jobdetail(任务) -->
		<property name="jobDetail" ref="jobDetail" />
		<!-- 指定调度规则 -->
		<property name="cronExpression">
			//该规则表示每5秒触发执行一次任务
			<value>0/5 * * * * ?</value>
		</property>
	</bean>
	
	<!-- 指定调度工厂，该类负责在spring容器中创建调度器。调度器最重要的属性有triggers,这是一个List集合，定义了该调度器负责调度的所有触发器 -->
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<!-- 注入触发器 -->
		<property name="triggers">
			<array>
				<ref bean="trigger" />
			</array>
		</property>
	</bean>

说明：scheduler是个容器，容器中有一个线程池，用来并行调度执行每个作业，这样可以提高容器效率
当JobDetail和Trigger在scheduler容器上注册后，形成了装配好的作业（JobDetail和Trigger所组成的一对儿），就可以伴随容器启动而调度执行了。
	

2、使用POI实现区域数据导出为Excel文件
页面路径：bos_managment_web/src/main/webapp/pages/base/area.html
需要用到的工具类：MailUtils
(1)工具栏上添加导出按钮，以及设置响应函数
	{
		id : 'button-export',
		text : '导出',
		iconCls : 'icon-undo',
		handler : doExport
	}
	
	function doExport(){
		window.location.href="../../areaAction_exportExcel.action";
	}
(2)在AreaAction中新增exportExcel方法
	  @Action("areaAction_exportExcel")
	  public String exportExcel() throws IOException {
		  // 查询所有分区
		  List<Area> list = areaService.findAll();
		  // 在内存中创建Excel文件
		  HSSFWorkbook hssfWorkbook = new HSSFWorkbook();
		  // 创建工作簿
		  HSSFSheet sheet = hssfWorkbook.createSheet("区域数据");
		  // 创建第1行,即表头
		  HSSFRow titleRow = sheet.createRow(0);
		  // 创建列
		  titleRow.createCell(0).setCellValue("省");
		  titleRow.createCell(1).setCellValue("市");
		  titleRow.createCell(2).setCellValue("区");
		  titleRow.createCell(3).setCellValue("邮编");
		  titleRow.createCell(4).setCellValue("简码");
		  titleRow.createCell(5).setCellValue("城市编码");
		  // 遍历从数据库查找出来的所有分区的集合
		  for (Area area : list) {
			  // 创建数据行
			  HSSFRow dataRow = sheet.createRow(sheet.getLastRowNum() + 1);
			  //向数据行里面写入数据
			  dataRow.createCell(0).setCellValue(area.getProvince());
			  dataRow.createCell(1).setCellValue(area.getCity());
			  dataRow.createCell(2).setCellValue(area.getDistrict());
			  dataRow.createCell(3).setCellValue(area.getPostcode());
			  dataRow.createCell(4).setCellValue(area.getShortcode());
			  dataRow.createCell(5).setCellValue(area.getCitycode());
		  }
		  // 获取响应对象
		  HttpServletResponse response = ServletActionContext.getResponse();
		  // 获取输出流
		  ServletOutputStream outputStream = response.getOutputStream();
		  // 定义文件名
		  String fileName = "区域数据.xls";
		  // 从请求头中获取客户端类型
		  String agent = ServletActionContext.getRequest().getHeader("User-Agent");
		  // 使用FileUtils工具类根据浏览器类型对文件名进行重新编码,避免乱码
		  fileName = FileUtils.encodeDownloadFilename(fileName, agent);
		  // 指定以附件的形式处理文件
		  response.setHeader("Content-Disposition", "attachment; filename=" + fileName);
		  // 指定文件的MIME类型(也就是指定文件的格式)
		  response.setContentType(ServletActionContext.getServletContext().getMimeType(fileName));
		  // 写出文件
		  hssfWorkbook.write(outputStream);
		  // 释放资源
		  hssfWorkbook.close();
		  return NONE;
	  }